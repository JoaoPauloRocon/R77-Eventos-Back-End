const Rating = require('../entity/Rating');
const Event = require('../entity/Events');
const User = require('../entity/User');
const BadRequestException = require('../../application/exception/BadRequestException');
const logger = require('../utils/logger'); // üëà importa o logger

class RatingService {
  // Criar avalia√ß√£o
  async createRating(eventId, userId, rating, comment) {
    logger.info(`Usu√°rio ${userId} est√° tentando avaliar o evento ${eventId}`);

    const event = await Event.findByPk(eventId);
    if (!event) {
      logger.warn(`Evento ${eventId} n√£o encontrado`);
      throw new BadRequestException('Evento n√£o encontrado');
    }

    const existingRating = await Rating.findOne({ where: { event_id: eventId, user_id: userId } });
    if (existingRating) {
      logger.warn(`Usu√°rio ${userId} j√° avaliou o evento ${eventId}`);
      throw new BadRequestException('Voc√™ j√° avaliou este evento.');
    }

    const newRating = await Rating.create({
      event_id: eventId,
      user_id: userId,
      rating,
      comment,
    });

    logger.info(`Usu√°rio ${userId} avaliou o evento ${eventId} com nota ${rating}`);
    return newRating;
  }

  // Listar avalia√ß√µes de um evento
  async getRatingsByEventId(eventId) {
    logger.info(`Listando avalia√ß√µes do evento ${eventId}`);

    const event = await Event.findByPk(eventId);
    if (!event) {
      logger.warn(`Tentativa de buscar avalia√ß√µes de evento inexistente ${eventId}`);
      throw new BadRequestException('Evento n√£o encontrado');
    }

    const ratings = await Rating.findAll({
      where: { event_id: eventId },
      include: [{ model: User, as: 'user', attributes: ['id', 'name'] }],
    });

    logger.info(`Evento ${eventId} tem ${ratings.length} avalia√ß√£o(√µes)`);
    return ratings;
  }
}

module.exports = new RatingService();
